#!/usr/bin/env python

from check import *

################################################################################

##########
# Examples from the thesis
##########

H32 = Hypergraph([1,2,3,4,5,6,7,8], [[1,2,3],[1,4,5],[6,7,8]])
H33 = Hypergraph([1,2,3,4,5,6,7], [[1,2,3],[1,2,4],[5,6,7]])
H34 = Hypergraph([1,2,3,4,5,6,7], [[1,2,3],[1,4,5],[1,6,7]])
H35 = Hypergraph([1,2,3,4,5,6,7], [[1,2,3],[1,4,5],[4,6,7]])

H42 = Hypergraph([1,2,3,4,5,6], [[1,2,3], [1,5,6], [2,4,6], [3,4,5]])
H43 = Hypergraph([1,2,3,4,5,6], [[1,2,3], [1,5,6], [2,3,4], [4,5,6]])

H52 = Hypergraph([1,2,3,4,5], [[1,2,3],[1,2,4],[1,3,5],[2,4,5],[3,4,5]])

OCTAHEDRON = Hypergraph([0,1,2,3,4,5], [[0,1,2],[0,1,5],[0,2,4],[0,4,5],[1,2,3],[1,3,5],[2,3,4],[3,4,5]])

################################################################################

print("Example 2.A.1: H3i-design of order 9:")
print("  H32: ", end="")
check_decomposition(complete_hypergraph(list(range(7)) + [INF(1), INF(2)]),
                    [
                     H32.copy([INF(1), 0, 1, 2, INF(2), 3, 4, 5]),
                     H32.copy([INF(1), 0, 2, 1, 4, 5, 6, INF(2)]),
                     H32.copy([0, 1, 4, 2, 6, 3, 5, INF(2)]),
                     H32.copy([0, 1, 5, 2, 4, 3, 6, INF(2)]),
                    ],
                    [ permutation(list(range(7))) ])

print("  H33: ", end="")
check_decomposition(complete_hypergraph(list(range(7)) + [INF(1), INF(2)]),
                    [
                     H33.copy([0, INF(1), 1, INF(2), 2, 3, 4]),
                     H33.copy([0, INF(1), 2, 3, 4, 5, INF(2)]),
                     H33.copy([0, INF(2), 2, 3, 1, 5, 6]),
                     H33.copy([0, 3, 4, 5, 1, 2, 6]),
                    ],
                    [ permutation(list(range(7))) ])

print("  H34: ", end="")
check_decomposition(complete_hypergraph(list(range(7)) + [INF(1), INF(2)]),
                    [
                     H34.copy([INF(1), 0, 1, 2, 4, 3, INF(2)]),
                     H34.copy([0, 1, 2, 3, INF(1), 6, INF(2)]),
                     H34.copy([0, 1, 4, 2, 6, 5, INF(2)]),
                     H34.copy([0, 1, 5, 2, 4, 3, INF(2)]),
                    ],
                    [ permutation(list(range(7))) ])

print("  H35: ", end="")
check_decomposition(complete_hypergraph(list(range(7)) + [INF(1), INF(2)]),
                    [
                     H35.copy([INF(1), 0, 1, INF(2), 2, 3, 4]),
                     H35.copy([0, 2, INF(2), INF(1), 3, 1, 6]),
                     H35.copy([0, 1, 2, 3, INF(2), 4, 6]),
                     H35.copy([0, 1, 4, 5, 2, 3, 6]),
                    ],
                    [ permutation(list(range(7))) ])
print()

################################################################################

print("Example 2.A.2: H3i-design of order 10:")
print("  H32: ", end="")
check_decomposition(complete_hypergraph(list(range(10))),
                    [
                     H32.copy([0, 1, 2, 3, 9, 4, 5, 7]),
                     H32.copy([0, 1, 5, 2, 3, 4, 8, 9]),
                     H32.copy([0, 2, 4, 3, 8, 1, 5, 7]),
                     H32.copy([0, 1, 7, 3, 5, 2, 6, 9]),
                    ],
                    [ permutation(list(range(10))) ])

print("  H33: ", end="")
check_decomposition(complete_hypergraph(list(range(10))),
                    [
                     H33.copy([0, 1, 2, 3, 4, 5, 8]),
                     H33.copy([0, 1, 5, 8, 2, 6, 7]),
                     H33.copy([0, 2, 4, 5, 1, 3, 7]),
                     H33.copy([0, 3, 4, 5, 2, 6, 9]),
                    ],
                    [ permutation(list(range(10))) ])

print("  H34: ", end="")
check_decomposition(complete_hypergraph(list(range(10))),
                    [
                     H34.copy([0, 1, 2, 3, 9, 7, 8]),
                     H34.copy([0, 1, 6, 2, 3, 4, 9]),
                     H34.copy([0, 2, 8, 4, 6, 5, 7]),
                     H34.copy([0, 1, 7, 3, 6, 5, 8]),
                    ],
                    [ permutation(list(range(10))) ])

print("  H35: ", end="")
check_decomposition(complete_hypergraph(list(range(10))),
                    [
                     H35.copy([0, 1, 2, 3, 9, 4, 6]),
                     H35.copy([0, 1, 5, 2, 3, 6, 7]),
                     H35.copy([0, 2, 4, 3, 8, 1, 7]),
                     H35.copy([0, 1, 7, 3, 5, 6, 9]),
                    ],
                    [ permutation(list(range(10))) ])

################################################################################

print("Example 2.A.3: H3i-design of order 11:")
print("  H32: ", end="")
check_decomposition(complete_hypergraph(list(range(11))),
                    [
                     H32.copy([0, 1, 2, 3, 10, 4, 5, 7]),
                     H32.copy([0, 1, 5, 2, 3, 4, 9, 10]),
                     H32.copy([0, 2, 4, 3, 9, 1, 5, 10]),
                     H32.copy([0, 1, 8, 3, 5, 2, 4, 9]),
                     H32.copy([0, 1, 7, 3, 6, 2, 5, 9]),
                    ],
                    [ permutation(list(range(11))) ])

print("  H33: ", end="")
check_decomposition(complete_hypergraph(list(range(11))),
                    [
                     H33.copy([0, 1, 2, 3, 4, 5, 8]),
                     H33.copy([0, 1, 5, 6, 7, 9, 10]),
                     H33.copy([0, 2, 4, 5, 1, 3, 7]),
                     H33.copy([0, 2, 7, 8, 1, 4, 5]),
                     H33.copy([0, 3, 6, 7, 1, 2, 8]),
                    ],
                    [ permutation(list(range(11))) ])

print("  H34: ", end="")
check_decomposition(complete_hypergraph(list(range(11))),
                    [
                     H34.copy([0, 1, 2, 3, 10, 8, 9]),
                     H34.copy([0, 1, 6, 2, 3, 4, 10]),
                     H34.copy([0, 2, 4, 3, 9, 5, 7]),
                     H34.copy([0, 1, 8, 2, 7, 3, 5]),
                     H34.copy([0, 1, 7, 3, 6, 4, 8]),
                    ],
                    [ permutation(list(range(11))) ])

print("  H35: ", end="")
check_decomposition(complete_hypergraph(list(range(11))),
                    [
                     H35.copy([0, 1, 2, 3, 10, 4, 6]),
                     H35.copy([0, 1, 5, 2, 3, 7, 8]),
                     H35.copy([0, 2, 4, 3, 9, 1, 7]),
                     H35.copy([0, 1, 8, 2, 7, 4, 10]),
                     H35.copy([0, 1, 7, 3, 8, 6, 10]),
                    ],
                    [ permutation(list(range(11))) ])
print()

################################################################################

print("Example 2.A.4: H3i-decomposition of K_{9,9,9}^{(3)}:")
print("  H32: ", end="")
check_decomposition(multipartite([[(c, i) for i in range(9)] for c in 'uvw']),
                    [
                     H32.copy([('w', 0), ('u', 0), ('v', 0), ('u', 7), ('v', 7), ('u', 1), ('v', 1), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 4), ('u', 5), ('v', 5), ('u', 0), ('v', 0), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 0), ('v', 0), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 1), ('u', 7), ('v', 8), ('u', 1), ('v', 2), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 5), ('u', 5), ('v', 6), ('u', 0), ('v', 1), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 0), ('v', 1), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 2), ('u', 7), ('v', 0), ('u', 1), ('v', 3), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 6), ('u', 5), ('v', 7), ('u', 0), ('v', 2), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 3), ('u', 2), ('v', 4), ('u', 0), ('v', 2), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 3), ('u', 7), ('v', 1), ('u', 1), ('v', 4), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 7), ('u', 5), ('v', 8), ('u', 0), ('v', 3), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 4), ('u', 2), ('v', 5), ('u', 0), ('v', 3), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 4), ('u', 7), ('v', 2), ('u', 1), ('v', 5), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 8), ('u', 5), ('v', 0), ('u', 0), ('v', 4), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 5), ('u', 2), ('v', 6), ('u', 0), ('v', 4), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 5), ('u', 7), ('v', 3), ('u', 1), ('v', 6), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 0), ('u', 5), ('v', 1), ('u', 0), ('v', 5), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 6), ('u', 2), ('v', 7), ('u', 0), ('v', 5), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 6), ('u', 7), ('v', 4), ('u', 1), ('v', 7), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 1), ('u', 5), ('v', 2), ('u', 0), ('v', 6), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 7), ('u', 2), ('v', 8), ('u', 0), ('v', 6), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 7), ('u', 7), ('v', 5), ('u', 1), ('v', 8), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 2), ('u', 5), ('v', 3), ('u', 0), ('v', 7), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 8), ('u', 2), ('v', 0), ('u', 0), ('v', 7), ('w', 6)]),
                     H32.copy([('w', 0), ('u', 0), ('v', 8), ('u', 7), ('v', 6), ('u', 1), ('v', 0), ('w', 2)]),
                     H32.copy([('w', 0), ('u', 4), ('v', 3), ('u', 5), ('v', 4), ('u', 0), ('v', 8), ('w', 3)]),
                     H32.copy([('w', 0), ('u', 1), ('v', 0), ('u', 2), ('v', 1), ('u', 0), ('v', 8), ('w', 6)]),
                    ],
                    [ permutation(*[[(c, i) for i in range(9)] for c in 'uvw']) ])

print("  H33: ", end="")
check_decomposition(multipartite([[(c, i) for i in range(9)] for c in 'uvw']),
                    [
                     H33.copy([('u', 0), ('v', 0), ('w', 0), ('w', 1), ('u', 1), ('v', 1), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 0), ('w', 3), ('w', 4), ('u', 1), ('v', 1), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 0), ('w', 6), ('w', 7), ('u', 1), ('v', 1), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 1), ('w', 0), ('w', 1), ('u', 1), ('v', 2), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 1), ('w', 3), ('w', 4), ('u', 1), ('v', 2), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 1), ('w', 6), ('w', 7), ('u', 1), ('v', 2), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 2), ('w', 0), ('w', 1), ('u', 1), ('v', 3), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 2), ('w', 3), ('w', 4), ('u', 1), ('v', 3), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 2), ('w', 6), ('w', 7), ('u', 1), ('v', 3), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 3), ('w', 0), ('w', 1), ('u', 1), ('v', 4), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 3), ('w', 3), ('w', 4), ('u', 1), ('v', 4), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 3), ('w', 6), ('w', 7), ('u', 1), ('v', 4), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 4), ('w', 0), ('w', 1), ('u', 1), ('v', 5), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 4), ('w', 3), ('w', 4), ('u', 1), ('v', 5), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('w', 6), ('w', 7), ('u', 1), ('v', 5), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 5), ('w', 0), ('w', 1), ('u', 1), ('v', 6), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 5), ('w', 3), ('w', 4), ('u', 1), ('v', 6), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 5), ('w', 6), ('w', 7), ('u', 1), ('v', 6), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 6), ('w', 0), ('w', 1), ('u', 1), ('v', 7), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 6), ('w', 3), ('w', 4), ('u', 1), ('v', 7), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 6), ('w', 6), ('w', 7), ('u', 1), ('v', 7), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 7), ('w', 0), ('w', 1), ('u', 1), ('v', 8), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 7), ('w', 3), ('w', 4), ('u', 1), ('v', 8), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 7), ('w', 6), ('w', 7), ('u', 1), ('v', 8), ('w', 0)]),
                     H33.copy([('u', 0), ('v', 8), ('w', 0), ('w', 1), ('u', 1), ('v', 0), ('w', 3)]),
                     H33.copy([('u', 0), ('v', 8), ('w', 3), ('w', 4), ('u', 1), ('v', 0), ('w', 6)]),
                     H33.copy([('u', 0), ('v', 8), ('w', 6), ('w', 7), ('u', 1), ('v', 0), ('w', 0)]),
                    ],
                    [ permutation(*[[(c, i) for i in range(9)] for c in 'uvw']) ])

print("  H34: ", end="")
check_decomposition(multipartite([[(c, i) for i in range(9)] for c in 'uvw']),
                    [
                     H34.copy([('w', 0), ('u', 0), ('v', 0), ('u', 7), ('v', 7), ('u', 8), ('v', 8)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 0), ('u', 7), ('v', 7), ('u', 8), ('v', 8)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 0), ('u', 7), ('v', 7), ('u', 8), ('v', 8)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 1), ('u', 7), ('v', 8), ('u', 8), ('v', 0)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 1), ('u', 7), ('v', 8), ('u', 8), ('v', 0)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 1), ('u', 7), ('v', 8), ('u', 8), ('v', 0)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 2), ('u', 7), ('v', 0), ('u', 8), ('v', 1)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 2), ('u', 7), ('v', 0), ('u', 8), ('v', 1)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 2), ('u', 7), ('v', 0), ('u', 8), ('v', 1)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 3), ('u', 7), ('v', 1), ('u', 8), ('v', 2)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 3), ('u', 7), ('v', 1), ('u', 8), ('v', 2)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 3), ('u', 7), ('v', 1), ('u', 8), ('v', 2)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 4), ('u', 7), ('v', 2), ('u', 8), ('v', 3)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 4), ('u', 7), ('v', 2), ('u', 8), ('v', 3)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 4), ('u', 7), ('v', 2), ('u', 8), ('v', 3)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 5), ('u', 7), ('v', 3), ('u', 8), ('v', 4)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 5), ('u', 7), ('v', 3), ('u', 8), ('v', 4)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 5), ('u', 7), ('v', 3), ('u', 8), ('v', 4)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 6), ('u', 7), ('v', 4), ('u', 8), ('v', 5)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 6), ('u', 7), ('v', 4), ('u', 8), ('v', 5)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 6), ('u', 7), ('v', 4), ('u', 8), ('v', 5)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 7), ('u', 7), ('v', 5), ('u', 8), ('v', 6)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 7), ('u', 7), ('v', 5), ('u', 8), ('v', 6)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 7), ('u', 7), ('v', 5), ('u', 8), ('v', 6)]),
                     H34.copy([('w', 0), ('u', 0), ('v', 8), ('u', 7), ('v', 6), ('u', 8), ('v', 7)]),
                     H34.copy([('w', 3), ('u', 0), ('v', 8), ('u', 7), ('v', 6), ('u', 8), ('v', 7)]),
                     H34.copy([('w', 6), ('u', 0), ('v', 8), ('u', 7), ('v', 6), ('u', 8), ('v', 7)]),
                    ],
                    [ permutation(*[[(c, i) for i in range(9)] for c in 'uvw']) ])

print("  H35: ", end="")
check_decomposition(multipartite([[(c, i) for i in range(9)] for c in 'uvw']),
                    [
                     H35.copy([('v', 0), ('u', 0), ('w', 0), ('w', 8), ('u', 8), ('u', 7), ('v', 7)]),
                     H35.copy([('u', 0), ('v', 0), ('w', 2), ('v', 1), ('w', 1), ('u', 1), ('w', 4)]),
                     H35.copy([('u', 0), ('v', 0), ('w', 4), ('v', 1), ('w', 2), ('u', 1), ('w', 6)]),
                     H35.copy([('u', 0), ('v', 0), ('w', 6), ('v', 1), ('w', 3), ('u', 1), ('w', 8)]),
                     H35.copy([('u', 0), ('v', 0), ('w', 8), ('w', 5), ('v', 1), ('u', 1), ('v', 2)]),
                     H35.copy([('u', 0), ('v', 1), ('w', 6), ('v', 2), ('w', 0), ('u', 1), ('w', 8)]),
                     H35.copy([('u', 0), ('v', 1), ('w', 8), ('w', 2), ('v', 2), ('u', 1), ('v', 3)]),
                     H35.copy([('u', 0), ('v', 2), ('w', 3), ('v', 3), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 2), ('w', 5), ('v', 3), ('w', 1), ('u', 1), ('w', 7)]),
                     H35.copy([('u', 0), ('v', 2), ('w', 7), ('v', 3), ('w', 2), ('u', 1), ('w', 0)]),
                     H35.copy([('u', 0), ('v', 3), ('w', 3), ('v', 4), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 3), ('w', 5), ('v', 4), ('w', 1), ('u', 1), ('w', 7)]),
                     H35.copy([('u', 0), ('v', 3), ('w', 7), ('v', 4), ('w', 2), ('u', 1), ('w', 0)]),
                     H35.copy([('u', 0), ('v', 4), ('w', 3), ('v', 5), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 4), ('w', 5), ('v', 5), ('w', 1), ('u', 1), ('w', 7)]),
                     H35.copy([('u', 0), ('v', 4), ('w', 7), ('v', 5), ('w', 2), ('u', 1), ('w', 0)]),
                     H35.copy([('u', 0), ('v', 5), ('w', 3), ('v', 6), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 5), ('w', 5), ('v', 6), ('w', 1), ('u', 1), ('w', 7)]),
                     H35.copy([('u', 0), ('v', 5), ('w', 7), ('v', 6), ('w', 2), ('u', 1), ('w', 0)]),
                     H35.copy([('u', 0), ('v', 6), ('w', 3), ('v', 7), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 6), ('w', 5), ('v', 7), ('w', 1), ('u', 1), ('w', 7)]),
                     H35.copy([('u', 0), ('v', 6), ('w', 7), ('v', 7), ('w', 2), ('u', 1), ('w', 0)]),
                     H35.copy([('u', 0), ('v', 7), ('w', 3), ('v', 8), ('w', 0), ('u', 1), ('w', 5)]),
                     H35.copy([('u', 0), ('v', 7), ('w', 5), ('w', 2), ('v', 8), ('u', 1), ('v', 0)]),
                     H35.copy([('u', 0), ('v', 7), ('w', 6), ('w', 4), ('v', 8), ('u', 1), ('v', 0)]),
                     H35.copy([('u', 0), ('v', 7), ('w', 7), ('w', 6), ('v', 8), ('u', 1), ('v', 0)]),
                     H35.copy([('v', 0), ('u', 2), ('w', 1), ('w', 8), ('u', 1), ('u', 0), ('v', 8)]),
                    ],
                    [ permutation(*[[(c, i) for i in range(9)] for c in 'uvw']) ])
print()

################################################################################

print("Example 2.A.5: H3i-decomposition of L_{9,9}^{(3)}:")
print("  H32: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv']),
                    [
                     H32.copy([('u', 0), ('u', 1), ('v', 0), ('u', 6), ('v', 6), ('u', 2), ('u', 4), ('v', 2)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 0), ('u', 1), ('u', 5), ('v', 5)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 4), ('u', 5), ('v', 3)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 1), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 1), ('u', 5), ('v', 4)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 2), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 1), ('u', 5), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 2), ('u', 4), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 2), ('u', 6), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 1), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 2), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('u', 4), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 1), ('u', 6), ('v', 6), ('u', 2), ('v', 2), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 4), ('u', 3), ('v', 3), ('u', 1), ('v', 1), ('v', 6)]),
                     H32.copy([('u', 0), ('v', 0), ('v', 7), ('v', 1), ('v', 2), ('u', 4), ('v', 3), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 5), ('u', 5), ('v', 6), ('u', 0), ('v', 1), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 0), ('v', 1), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 6), ('u', 5), ('v', 7), ('u', 0), ('v', 2), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 3), ('u', 2), ('v', 4), ('u', 0), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 3), ('v', 6), ('u', 4), ('v', 7), ('u', 0), ('v', 3), ('v', 4)]),
                     H32.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 3), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 5), ('u', 5), ('v', 2), ('u', 0), ('v', 4), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 6), ('u', 3), ('v', 8), ('u', 0), ('v', 5), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 8), ('u', 3), ('v', 2), ('u', 0), ('v', 6), ('v', 7)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H33: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv']),
                    [
                     H33.copy([('u', 0), ('v', 0), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 3)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 0), ('v', 4), ('u', 1), ('u', 7), ('v', 1)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 1), ('v', 8), ('u', 2), ('u', 4), ('v', 4)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 0)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 5), ('u', 6), ('u', 1), ('u', 3), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 7), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 1)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 2), ('v', 7), ('u', 1), ('u', 7), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 0)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 1), ('v', 6), ('u', 2), ('u', 3), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 5), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 7)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 2), ('v', 3), ('u', 2), ('u', 4), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 1), ('v', 2), ('u', 3), ('v', 3), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 4), ('v', 5), ('u', 1), ('v', 1), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 7), ('v', 8), ('u', 1), ('v', 2), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 3), ('v', 4), ('u', 1), ('v', 2), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 3), ('v', 4), ('u', 3), ('v', 5), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 4), ('v', 5), ('u', 3), ('v', 0), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 7), ('v', 8), ('u', 1), ('v', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 5), ('v', 6), ('v', 7), ('u', 3), ('v', 2), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('v', 7), ('v', 8), ('u', 2), ('v', 0), ('v', 1)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H34: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv']),
                    [
                     H34.copy([('u', 0), ('u', 1), ('v', 0), ('u', 6), ('v', 6), ('u', 7), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 8), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 6), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 4), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 7), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 5), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 7), ('v', 4)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 5), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 6), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 7), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 3), ('u', 8), ('v', 2), ('v', 0), ('v', 1)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 2), ('u', 6), ('v', 6), ('u', 7), ('u', 8)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 6), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 7), ('u', 1), ('v', 1), ('u', 7), ('v', 8)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 3), ('u', 5), ('v', 6), ('u', 6), ('v', 7)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 6), ('u', 2), ('v', 3), ('u', 3), ('v', 4)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 3), ('u', 6), ('v', 8), ('u', 7), ('v', 0)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 8), ('u', 4), ('v', 6), ('u', 5), ('v', 7)]),
                     H34.copy([('v', 3), ('u', 0), ('v', 4), ('u', 6), ('v', 0), ('u', 7), ('v', 1)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 5), ('u', 5), ('v', 8), ('u', 6), ('v', 0)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 6), ('u', 5), ('v', 0), ('u', 6), ('v', 1)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 6), ('u', 7), ('v', 3), ('u', 8), ('v', 7)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 8), ('u', 6), ('v', 4), ('u', 8), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H35: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv']),
                    [
                     H35.copy([('u', 0), ('u', 1), ('v', 0), ('u', 6), ('v', 6), ('u', 4), ('v', 4)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 0), ('u', 8), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 1), ('u', 7), ('v', 0), ('u', 6), ('v', 5)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 4), ('u', 2), ('v', 8), ('u', 8), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 7), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 4), ('v', 2)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 7), ('u', 8), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 4), ('v', 1)]),
                     H35.copy([('u', 0), ('u', 4), ('v', 1), ('u', 1), ('v', 5), ('u', 5), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 1), ('u', 2), ('v', 5), ('u', 8), ('v', 4)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 4), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 1), ('v', 6), ('u', 6), ('u', 4), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 4), ('v', 3), ('u', 3), ('u', 7), ('v', 7)]),
                     H35.copy([('u', 0), ('v', 0), ('v', 7), ('v', 2), ('v', 1), ('u', 3), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 5), ('v', 3), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 2), ('v', 6), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 6), ('v', 2), ('u', 7), ('u', 0), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 4), ('v', 6), ('u', 7), ('u', 0), ('v', 2)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 7), ('v', 3), ('u', 6), ('u', 0), ('v', 4)]),
                     H35.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 1), ('v', 0)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 5), ('v', 6), ('u', 2), ('u', 0), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 7), ('v', 6), ('u', 1), ('u', 0), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 1), ('v', 7), ('u', 1), ('u', 0), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])
print()

################################################################################

print("Example 2.A.6: H3i-decomposition of L_{9,9,[1]}^{(3)}:")
print("  H32: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1)]),
                    [
                     H32.copy([INF(1), ('u', 0), ('v', 0), ('u', 1), ('v', 2), ('u', 3), ('u', 4), ('v', 3)]),
                     H32.copy([INF(1), ('u', 0), ('v', 2), ('u', 1), ('v', 4), ('u', 3), ('u', 5), ('v', 3)]),
                     H32.copy([INF(1), ('u', 0), ('v', 4), ('u', 1), ('v', 6), ('u', 2), ('u', 5), ('v', 2)]),
                     H32.copy([INF(1), ('u', 0), ('v', 6), ('u', 1), ('v', 8), ('u', 2), ('u', 6), ('v', 2)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 4), ('u', 1), ('v', 0), INF(1)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 4), ('u', 5), ('v', 3)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 1), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 1), ('u', 5), ('v', 4)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 2), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 1), ('u', 5), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 2), ('u', 4), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 2), ('u', 6), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 1), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 2), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('u', 4), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 1), ('u', 6), ('v', 6), ('u', 2), ('v', 2), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 4), ('u', 3), ('v', 3), ('u', 1), ('v', 1), ('v', 6)]),
                     H32.copy([('u', 0), ('v', 0), ('v', 7), ('v', 1), ('v', 2), ('u', 4), ('v', 3), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 5), ('u', 5), ('v', 6), ('u', 0), ('v', 1), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 0), ('v', 1), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 6), ('u', 5), ('v', 7), ('u', 0), ('v', 2), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 3), ('u', 2), ('v', 4), ('u', 0), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 3), ('v', 6), ('u', 4), ('v', 7), ('u', 0), ('v', 3), ('v', 4)]),
                     H32.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 3), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 5), ('u', 5), ('v', 2), ('u', 0), ('v', 4), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 6), ('u', 3), ('v', 8), ('u', 0), ('v', 5), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 8), ('u', 3), ('v', 2), ('u', 0), ('v', 6), ('v', 7)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H33: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1)]),
                    [
                     H33.copy([('u', 0), INF(1), ('v', 0), ('v', 1), ('u', 2), ('u', 3), ('v', 2)]),
                     H33.copy([('u', 0), INF(1), ('v', 2), ('v', 3), ('u', 1), ('u', 3), ('v', 1)]),
                     H33.copy([('u', 0), INF(1), ('v', 4), ('v', 5), ('u', 1), ('u', 4), ('v', 1)]),
                     H33.copy([('u', 0), INF(1), ('v', 6), ('v', 7), ('u', 1), ('u', 5), ('v', 1)]),
                     H33.copy([('u', 0), ('v', 0), ('u', 5), ('u', 6), ('u', 2), ('v', 1), INF(1)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 1), ('v', 8), ('u', 2), ('u', 4), ('v', 4)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 0)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 5), ('u', 6), ('u', 1), ('u', 3), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 7), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 1)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 2), ('v', 7), ('u', 1), ('u', 7), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 0)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 1), ('v', 6), ('u', 2), ('u', 3), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 5), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 7)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 2), ('v', 3), ('u', 2), ('u', 4), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 1), ('v', 2), ('u', 3), ('v', 3), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 4), ('v', 5), ('u', 1), ('v', 1), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 7), ('v', 8), ('u', 1), ('v', 2), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 3), ('v', 4), ('u', 1), ('v', 2), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 3), ('v', 4), ('u', 3), ('v', 5), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 4), ('v', 5), ('u', 3), ('v', 0), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 7), ('v', 8), ('u', 1), ('v', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 5), ('v', 6), ('v', 7), ('u', 3), ('v', 2), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('v', 7), ('v', 8), ('u', 2), ('v', 0), ('v', 1)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H34: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1)]),
                    [
                     H34.copy([INF(1), ('u', 0), ('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 4)]),
                     H34.copy([INF(1), ('u', 0), ('v', 3), ('u', 1), ('v', 5), ('u', 2), ('v', 7)]),
                     H34.copy([INF(1), ('u', 0), ('v', 6), ('u', 1), ('v', 0), ('u', 3), ('v', 1)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 0), ('u', 6), ('v', 6), ('u', 7), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 8), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 6), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 4), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 7), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 5), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 7), ('v', 4)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 5), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 6), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 7), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 3), ('u', 8), ('v', 2), ('v', 0), ('v', 1)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 2), ('u', 6), ('v', 6), ('u', 7), ('u', 8)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 6), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 7), ('u', 1), ('v', 1), ('u', 7), ('v', 8)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 3), ('u', 5), ('v', 6), ('u', 6), ('v', 7)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 6), ('u', 2), ('v', 3), ('u', 3), ('v', 4)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 3), ('u', 6), ('v', 8), ('u', 7), ('v', 0)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 8), ('u', 4), ('v', 6), ('u', 5), ('v', 7)]),
                     H34.copy([('v', 3), ('u', 0), ('v', 4), ('u', 6), ('v', 0), ('u', 7), ('v', 1)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 5), ('u', 5), ('v', 8), ('u', 6), ('v', 0)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 6), ('u', 5), ('v', 0), ('u', 6), ('v', 1)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 6), ('u', 7), ('v', 3), ('u', 8), ('v', 7)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 8), ('u', 6), ('v', 4), ('u', 8), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H35: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1)]),
                    [
                     H35.copy([('u', 0), ('u', 1), ('v', 0), INF(1), ('v', 1), ('u', 2), ('v', 2)]),
                     H35.copy([('u', 0), ('u', 2), ('v', 0), INF(1), ('v', 2), ('u', 1), ('v', 4)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 0), INF(1), ('v', 4), ('u', 1), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 4), ('v', 0), INF(1), ('v', 6), ('u', 1), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 3), ('u', 5), ('v', 0), ('v', 4), INF(1)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 1), ('u', 7), ('v', 0), ('u', 6), ('v', 5)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 4), ('u', 2), ('v', 8), ('u', 8), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 7), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 4), ('v', 2)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 7), ('u', 8), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 4), ('v', 1)]),
                     H35.copy([('u', 0), ('u', 4), ('v', 1), ('u', 1), ('v', 5), ('u', 5), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 1), ('u', 2), ('v', 5), ('u', 8), ('v', 4)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 4), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 1), ('v', 6), ('u', 6), ('u', 4), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 4), ('v', 3), ('u', 3), ('u', 7), ('v', 7)]),
                     H35.copy([('u', 0), ('v', 0), ('v', 7), ('v', 2), ('v', 1), ('u', 3), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 5), ('v', 3), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 2), ('v', 6), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 6), ('v', 2), ('u', 7), ('u', 0), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 4), ('v', 6), ('u', 7), ('u', 0), ('v', 2)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 7), ('v', 3), ('u', 6), ('u', 0), ('v', 4)]),
                     H35.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 1), ('v', 0)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 5), ('v', 6), ('u', 2), ('u', 0), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 7), ('v', 6), ('u', 1), ('u', 0), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 1), ('v', 7), ('u', 1), ('u', 0), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])
print()

################################################################################

print("Example 2.A.7: H3i-decomposition of L_{9,9,[2]}^{(3)}:")
print("  H32: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1), INF(2)]),
                    [
                     H32.copy([INF(1), ('u', 0), ('v', 0), ('u', 1), ('v', 2), ('u', 3), ('v', 3), INF(2)]),
                     H32.copy([INF(1), ('u', 0), ('v', 2), ('u', 1), ('v', 4), ('u', 2), ('v', 3), INF(2)]),
                     H32.copy([INF(1), ('u', 0), ('v', 4), ('u', 1), ('v', 6), ('u', 3), ('v', 5), INF(2)]),
                     H32.copy([INF(1), ('u', 0), ('v', 6), ('u', 1), ('v', 8), ('u', 2), ('v', 5), INF(2)]),
                     H32.copy([INF(2), ('u', 0), ('v', 4), ('u', 1), ('v', 6), ('u', 2), ('v', 1), INF(1)]),
                     H32.copy([INF(2), ('u', 0), ('v', 6), ('u', 1), ('v', 8), ('u', 2), ('u', 3), ('v', 2)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 0), ('u', 6), ('v', 6), ('u', 3), ('v', 2), INF(2)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 0), ('u', 1), ('u', 5), ('v', 5)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 4), ('u', 5), ('v', 3)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 1), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 1), ('u', 5), ('v', 4)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 2), ('u', 4), ('v', 0)]),
                     H32.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 1), ('u', 5), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 2), ('u', 4), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 2), ('u', 6), ('v', 8)]),
                     H32.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 1), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 2), ('u', 4), ('v', 6)]),
                     H32.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('u', 4), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 1), ('u', 6), ('v', 6), ('u', 2), ('v', 2), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 0), ('v', 4), ('u', 3), ('v', 3), ('u', 1), ('v', 1), ('v', 6)]),
                     H32.copy([('u', 0), ('v', 0), ('v', 7), ('v', 1), ('v', 2), ('u', 4), ('v', 3), ('v', 4)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 5), ('u', 5), ('v', 6), ('u', 0), ('v', 1), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 0), ('v', 1), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 4), ('v', 6), ('u', 5), ('v', 7), ('u', 0), ('v', 2), ('v', 3)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 3), ('u', 2), ('v', 4), ('u', 0), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 3), ('v', 6), ('u', 4), ('v', 7), ('u', 0), ('v', 3), ('v', 4)]),
                     H32.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 3), ('v', 2), ('v', 6)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 5), ('u', 5), ('v', 2), ('u', 0), ('v', 4), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 6), ('u', 3), ('v', 8), ('u', 0), ('v', 5), ('v', 7)]),
                     H32.copy([('v', 0), ('u', 1), ('v', 8), ('u', 3), ('v', 2), ('u', 0), ('v', 6), ('v', 7)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H33: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1), INF(2)]),
                    [
                     H33.copy([('u', 0), INF(1), ('v', 0), ('v', 1), ('u', 2), ('v', 2), INF(2)]),
                     H33.copy([('u', 0), INF(1), ('v', 2), ('v', 3), ('u', 3), ('v', 4), INF(2)]),
                     H33.copy([('u', 0), INF(1), ('v', 4), ('v', 5), ('u', 1), ('v', 3), INF(2)]),
                     H33.copy([('u', 0), INF(1), ('v', 6), ('v', 7), ('u', 1), ('v', 4), INF(2)]),
                     H33.copy([('u', 0), INF(2), ('v', 4), ('v', 5), ('u', 1), ('v', 0), INF(1)]),
                     H33.copy([('u', 0), INF(2), ('v', 6), ('v', 7), ('u', 1), ('u', 2), ('v', 1)]),
                     H33.copy([('u', 0), ('v', 0), ('u', 2), ('u', 3), ('u', 4), ('v', 3), INF(2)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 0), ('v', 4), ('u', 1), ('u', 7), ('v', 1)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 1), ('v', 8), ('u', 2), ('u', 4), ('v', 4)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 0)]),
                     H33.copy([('u', 0), ('v', 8), ('u', 5), ('u', 6), ('u', 1), ('u', 3), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 7), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 1)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 2), ('v', 7), ('u', 1), ('u', 7), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 0)]),
                     H33.copy([('u', 0), ('u', 4), ('v', 1), ('v', 6), ('u', 2), ('u', 3), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 5), ('u', 2), ('u', 3), ('u', 1), ('u', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('u', 1), ('u', 2), ('u', 3), ('u', 6), ('v', 7)]),
                     H33.copy([('u', 0), ('u', 1), ('v', 2), ('v', 3), ('u', 2), ('u', 4), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 1), ('v', 2), ('u', 3), ('v', 3), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 4), ('v', 5), ('u', 1), ('v', 1), ('v', 7)]),
                     H33.copy([('u', 0), ('v', 0), ('v', 7), ('v', 8), ('u', 1), ('v', 2), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 3), ('v', 4), ('u', 1), ('v', 2), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 1), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 2)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 3), ('v', 4), ('u', 3), ('v', 5), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 2), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 3)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 4), ('v', 5), ('u', 3), ('v', 0), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 3), ('v', 7), ('v', 8), ('u', 1), ('v', 5), ('v', 6)]),
                     H33.copy([('u', 0), ('v', 4), ('v', 6), ('v', 7), ('u', 1), ('v', 0), ('v', 5)]),
                     H33.copy([('u', 0), ('v', 5), ('v', 6), ('v', 7), ('u', 3), ('v', 2), ('v', 8)]),
                     H33.copy([('u', 0), ('v', 6), ('v', 7), ('v', 8), ('u', 2), ('v', 0), ('v', 1)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H34: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1), INF(2)]),
                    [
                     H34.copy([INF(1), ('u', 0), ('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 4)]),
                     H34.copy([INF(1), ('u', 0), ('v', 3), ('u', 1), ('v', 5), ('u', 2), ('v', 7)]),
                     H34.copy([INF(1), ('u', 0), ('v', 6), ('u', 1), ('v', 0), ('u', 3), ('v', 1)]),
                     H34.copy([INF(2), ('u', 0), ('v', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 4)]),
                     H34.copy([INF(2), ('u', 0), ('v', 3), ('u', 1), ('v', 5), ('u', 2), ('v', 7)]),
                     H34.copy([INF(2), ('u', 0), ('v', 6), ('u', 1), ('v', 0), ('u', 3), ('v', 1)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 0), ('u', 6), ('v', 6), ('u', 7), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 1), ('u', 2), ('v', 2), ('u', 8), ('v', 7)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 8), ('u', 5), ('v', 4), ('u', 6), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 4), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 7), ('v', 5)]),
                     H34.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 2), ('u', 5), ('v', 3)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 7), ('v', 4)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 5), ('u', 4), ('v', 1), ('u', 5), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 5), ('u', 5), ('v', 1), ('u', 6), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 7), ('v', 2)]),
                     H34.copy([('u', 0), ('u', 2), ('v', 3), ('u', 8), ('v', 2), ('v', 0), ('v', 1)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 2), ('u', 6), ('v', 6), ('u', 7), ('u', 8)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 6), ('u', 4), ('v', 4), ('u', 5), ('v', 5)]),
                     H34.copy([('v', 0), ('u', 0), ('v', 7), ('u', 1), ('v', 1), ('u', 7), ('v', 8)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 3), ('u', 5), ('v', 6), ('u', 6), ('v', 7)]),
                     H34.copy([('v', 1), ('u', 0), ('v', 6), ('u', 2), ('v', 3), ('u', 3), ('v', 4)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 3), ('u', 6), ('v', 8), ('u', 7), ('v', 0)]),
                     H34.copy([('v', 2), ('u', 0), ('v', 8), ('u', 4), ('v', 6), ('u', 5), ('v', 7)]),
                     H34.copy([('v', 3), ('u', 0), ('v', 4), ('u', 6), ('v', 0), ('u', 7), ('v', 1)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 5), ('u', 5), ('v', 8), ('u', 6), ('v', 0)]),
                     H34.copy([('v', 4), ('u', 0), ('v', 6), ('u', 5), ('v', 0), ('u', 6), ('v', 1)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 6), ('u', 7), ('v', 3), ('u', 8), ('v', 7)]),
                     H34.copy([('v', 5), ('u', 0), ('v', 8), ('u', 6), ('v', 4), ('u', 8), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])

print("  H35: ", end="")
check_decomposition(candelabra([[(c, i) for i in range(9)] for c in 'uv'], [INF(1), INF(2)]),
                    [
                     H35.copy([('u', 0), ('v', 0), INF(2), INF(1), ('v', 1), ('u', 2), ('v', 2)]),
                     H35.copy([('u', 0), ('v', 1), INF(2), INF(1), ('v', 2), ('u', 1), ('v', 4)]),
                     H35.copy([('u', 0), ('v', 2), INF(2), INF(1), ('v', 4), ('u', 1), ('v', 6)]),
                     H35.copy([('u', 0), ('v', 3), INF(2), INF(1), ('v', 6), ('u', 1), ('v', 8)]),
                     H35.copy([('u', 0), ('v', 8), INF(1), INF(2), ('v', 4), ('u', 1), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 0), INF(2), ('v', 6), ('u', 3), ('v', 1)]),
                     H35.copy([('u', 0), ('u', 2), ('v', 0), ('u', 6), ('v', 6), ('v', 5), INF(2)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 3), ('u', 4), ('v', 0), ('u', 8), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 1), ('u', 7), ('v', 0), ('u', 6), ('v', 5)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 4), ('u', 2), ('v', 8), ('u', 8), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 2), ('v', 1), ('u', 3), ('v', 2), ('u', 7), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 7), ('u', 6), ('v', 4), ('u', 4), ('v', 2)]),
                     H35.copy([('u', 0), ('u', 3), ('v', 1), ('u', 4), ('v', 7), ('u', 8), ('v', 6)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 6), ('u', 6), ('v', 3), ('u', 4), ('v', 1)]),
                     H35.copy([('u', 0), ('u', 4), ('v', 1), ('u', 1), ('v', 5), ('u', 5), ('v', 7)]),
                     H35.copy([('u', 0), ('u', 5), ('v', 1), ('u', 2), ('v', 5), ('u', 8), ('v', 4)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 4), ('u', 6), ('v', 1), ('u', 4), ('v', 8)]),
                     H35.copy([('u', 0), ('u', 1), ('v', 2), ('u', 2), ('v', 3), ('u', 3), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 1), ('v', 6), ('u', 6), ('u', 4), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 0), ('v', 4), ('v', 3), ('u', 3), ('u', 7), ('v', 7)]),
                     H35.copy([('u', 0), ('v', 0), ('v', 7), ('v', 2), ('v', 1), ('u', 3), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 5), ('v', 3), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 2), ('v', 6), ('u', 8), ('u', 0), ('v', 1)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 6), ('v', 2), ('u', 7), ('u', 0), ('v', 3)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 4), ('v', 6), ('u', 7), ('u', 0), ('v', 2)]),
                     H35.copy([('v', 0), ('u', 4), ('v', 7), ('v', 3), ('u', 6), ('u', 0), ('v', 4)]),
                     H35.copy([('u', 0), ('v', 3), ('v', 7), ('v', 4), ('v', 5), ('u', 1), ('v', 0)]),
                     H35.copy([('v', 0), ('u', 1), ('v', 5), ('v', 6), ('u', 2), ('u', 0), ('v', 4)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 7), ('v', 6), ('u', 1), ('u', 0), ('v', 5)]),
                     H35.copy([('v', 0), ('u', 2), ('v', 1), ('v', 7), ('u', 1), ('u', 0), ('v', 6)]),
                    ],
                    [ permutation([('u', i) for i in range(9)], [('v', i) for i in range(9)]) ])
print()

################################################################################

print("Example 2.A.8: An H_{4,2}-design of order 6: ", end="")
check_decomposition(complete_hypergraph([0,1,2,3,4,INF(1)]),
                    [
                     H43.copy([INF(1), 0, 2, 1, 3, 4]),
                    ],
                    [permutation([0,1,2,3,4], [INF(1)])])
print()


print("Example 2.A.9: An H_{4,2}-design of order 9: ", end="")
check_decomposition(complete_hypergraph([0,1,2,3,4,5,6,INF(1),INF(2)]),
                    [
                     H43.copy([0, 1, 2, 6, 3, 4]),
                     H43.copy([INF(1), 0, 1, INF(2), 2, 5]),
                     H43.copy([INF(1), 0, INF(2), 2, 4, 6]),
                    ],
                    [permutation([0,1,2,3,4,5,6], [INF(1)], [INF(2)])])
print()


print("Example 2.A.10: An H_{4,2}-decomposition of K_{14}^{(3)} \\ K_{6}^{(3)}: ", end="")
check_decomposition(complete_hypergraph([(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7),(1,0),(1,1),(1,2),(1,3),(1,4),(1,5)])
                     - complete_hypergraph([(1,0),(1,1),(1,2),(1,3),(1,4),(1,5)]),
                    [
                     H43.copy([(0,0), (0,2), (0,7), (0,1), (0,4), (0,6)]),
                     H43.copy([(0,0), (0,3), (0,4), (1,0), (0,1), (1,3)]),
                     H43.copy([(0,0), (0,4), (0,5), (1,1), (0,1), (1,4)]),
                     H43.copy([(0,0), (0,1), (0,2), (1,2), (0,7), (1,5)]),
                    ],
                    [
                     permutation([(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)])
                    ],

                    [
                     H43.copy([(1,0), (0,0), (0,2), (1,1), (0,1), (0,4)]),
                    ],
                    [
                     permutation([(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)]),
                     permutation([(1,0),(1,2),(1,4)],[(1,1),(1,3),(1,5)]),
                    ],

                    [
                     H43.copy([(1,0), (0,0), (0,4), (1,1), (0,1), (0,5)]),
                    ],
                    [
                     permutation([(0,0),(0,2)],[(0,1),(0,3)],[(0,4),(0,6)],[(0,5),(0,7)]),
                     permutation([(1,0),(1,2),(1,4)],[(1,1),(1,3),(1,5)]),
                    ],

                    [
                     H43.copy([(0,0),(1,0),(1,1),(0,1),(1,2),(1,4)]),
                    ],
                    [
                     permutation([(0,0),(0,2),(0,4),(0,6)],[(0,1),(0,3),(0,5),(0,7)]),
                     permutation([(1,0),(1,1),(1,2),(1,3),(1,4),(1,5)]),
                    ])
print()


print("Example 2.A.11: An H_{4,2}-decomposition of L_{8,8,[6]}^{(3)}: ", end="")
check_decomposition(candelabra([[(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],
                                [(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]],
                                [(2,1),(2,2),(2,3),(2,4),(2,5),(2,6)]),
                    [
                     H43.copy([(0,0),(1,0),(1,1),(0,1),(1,4),(1,5)]),
                     H43.copy([(0,0),(1,1),(1,2),(0,1),(1,5),(1,6)]),
                     H43.copy([(0,0),(1,0),(1,2),(0,1),(1,4),(1,6)]),
                     H43.copy([(0,0),(1,1),(1,3),(0,1),(1,5),(1,7)]),
                     H43.copy([(0,0),(1,0),(1,3),(0,1),(1,4),(1,7)]),
                     H43.copy([(0,0),(1,1),(1,4),(0,1),(1,5),(1,0)]),
                     H43.copy([(0,0),(1,0),(1,4),(0,1),(1,1),(1,5)]),
                    ],
                    [
                     permutation([(0,0),(0,2),(0,4),(0,6)],[(0,1),(0,3),(0,5),(0,7)]),
                     permutation([(1,0),(1,2),(1,4),(1,6)],[(1,1),(1,3),(1,5),(1,7)]),
                     permutation(*[[(0,i),(1,i)] for i in range(8)])
                    ],

                    [ H43.copy([(2,1),(1,0),(0,0),(2,2),(1,1),(0,2)]) ],
                    [
                     permutation([(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],
                                 [(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]),
                     permutation([(1,0),(1,2),(1,4),(1,6)],[(1,1),(1,3),(1,5),(1,7)]),
                     permutation([(2,1),(2,3),(2,5)],[(2,2),(2,4),(2,6)])
                    ])
print()


print("Example 2.A.12: An H_{4,2}-decomposition of L_{8,8,[1]}^{(3)}: ", end="")
check_decomposition(candelabra([[(0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7)],
                                [(1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]],
                                [(2,0)]),
                    [
                     H43.copy([(0,0),(1,0),(1,2),(0,1),(1,4),(1,6)]),
                     H43.copy([(0,0),(1,1),(1,3),(0,1),(1,5),(1,7)]),
                     H43.copy([(0,0),(1,0),(1,3),(0,1),(1,4),(1,7)]),
                     H43.copy([(0,0),(1,1),(1,4),(0,1),(1,5),(1,0)]),
                     H43.copy([(0,0),(1,0),(1,4),(0,1),(1,1),(1,5)]),
                    ],
                    [
                     permutation([(0,0),(0,2),(0,4),(0,6)],[(0,1),(0,3),(0,5),(0,7)]),
                     permutation([(1,0),(1,2),(1,4),(1,6)],[(1,1),(1,3),(1,5),(1,7)]),
                     permutation(*[[(0,i),(1,i)] for i in range(8)])
                    ],

                    [ H43.copy([(0,0),(1,0),(1,1),(0,1),(1,4),(1,5)]) ],
                    [
                     permutation([(1,i) for i in range(8)]),
                     permutation([(0,0),(0,2),(0,4),(0,6)],[(0,1),(0,3),(0,5),(0,7)]),
                    ],

                    [ H43.copy([(1,0),(0,0),(2,0),(1,1),(0,4),(0,5)]) ],
                    [
                     permutation([(0,i) for i in range(8)]),
                     permutation([(1,0),(1,2),(1,4),(1,6)],[(1,1),(1,3),(1,5),(1,7)]),
                    ])
print()

################################################################################

print("An H4i-decomposition of the octahedron hypergraph:")
print("  H42: ", end="")
check_decomposition(OCTAHEDRON,
                    [ H42.copy([0,1,2,3,4,5]), H42.copy([0,1,5,3,4,2]) ],
                    [])

print("  H43: ", end="")
check_decomposition(OCTAHEDRON,
                    [ H43.copy([0,1,2,3,4,5]), H43.copy([0,1,5,3,4,2]) ],
                    [])
print()


print("An H42-design of order 6 and index \lambda >= 2:")
B = [
           H42.copy([INF(1), 0, 1, 3, 2, 4]),
           H42.copy([INF(1), 0, 1, 3, 4, 2]),
           H42.copy([INF(1), 0, 1, 4, 2, 3]),
           H42.copy([INF(1), 0, 1, 4, 3, 2]),
           H42.copy([INF(1), 0, 2, 4, 1, 3]),
           H42.copy([INF(1), 0, 2, 4, 3, 1]),
         ]
K = complete_hypergraph(list(range(5)) + [INF(1)])
pi = [ permutation(list(range(5))) ]

print("  lambda = 2: ", end="")
check_decomposition(2 * K, B[:2], pi)

print("  lambda = 3: ", end="")
check_decomposition(3 * K, [B[0], B[3], B[4]], pi)

print("  lambda = 4: ", end="")
check_decomposition(4 * K, [B[0], B[1], B[2], B[4]], pi)

print("  lambda = 6: ", end="")
check_decomposition(6 * K, B, pi)
print()


print("An H52-design of order 5: ", end="")
check_decomposition(complete_hypergraph([0,1,2,3,4]),
                    [ H52.copy([0,1,2,3,4]), H52.copy([4,0,1,3,2]) ],
                    [])
print()
